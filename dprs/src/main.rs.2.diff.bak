2c2
<     event::{self, DisableMouseCapture, EnableMouseCapture, Event, KeyCode},
---
>     event::{self, Event, KeyCode, KeyEvent, KeyModifiers},
8c8
<     backend::{Backend, CrosstermBackend},
---
>     backend::CrosstermBackend,
10c10,12
<     Frame, Terminal,
---
>     style::{Color, Modifier, Style},
>     widgets::{Block, Borders, List, ListItem, Paragraph},
>     Terminal,
11a14
> use clipboard::{ClipboardContext, ClipboardProvider};
13c16,17
< use dprs::app::{
---
> mod app;
> use app::{
17,20d20
< use dprs::display::{render_container_list, render_hotkey_bar, ToastManager};
< 
< mod app;
< mod display;
22,23c22,23
< fn main() -> Result<(), io::Error> {
<     // Setup terminal
---
> fn main() -> Result<(), Box<dyn std::error::Error>> {
>     // Set up terminal
26c26
<     execute!(stdout, EnterAlternateScreen, EnableMouseCapture)?;
---
>     execute!(stdout, EnterAlternateScreen)?;
33,35d32
<     
<     // Create toast manager
<     let mut toast_manager = ToastManager::new();
37,38c34,35
<     // Main loop
<     let res = run_app(&mut terminal, &mut app_state, &mut toast_manager);
---
>     // Start the main loop
>     let res = run_app(&mut terminal, &mut app_state);
42,46c39
<     execute!(
<         terminal.backend_mut(),
<         LeaveAlternateScreen,
<         DisableMouseCapture
<     )?;
---
>     execute!(terminal.backend_mut(), LeaveAlternateScreen)?;
50c43
<         println!("{}", err);
---
>         println!("Error: {}", err);
56c49
< fn run_app<B: Backend>(
---
> fn run_app<B: tui::backend::Backend>(
59,60c52
<     toast_manager: &mut ToastManager,
< ) -> Result<(), String> {
---
> ) -> Result<(), Box<dyn std::error::Error>> {
62,75c54,108
<         terminal.draw(|f| ui(f, app_state, toast_manager))?;
< 
<         toast_manager.check_expired();
< 
<         if let Event::Key(key) = event::read().map_err(|e| format!("Error reading event: {}", e))? {
<             let event = match key.code {
<                 KeyCode::Char('q') => AppEvent::Quit,
<                 KeyCode::Char('j') | KeyCode::Down => AppEvent::Next,
<                 KeyCode::Char('k') | KeyCode::Up => AppEvent::Previous,
<                 KeyCode::Char('c') => {
<                     if let Err(e) = copy_ip_address(app_state) {
<                         toast_manager.show(&e, 3000);
<                     } else {
<                         toast_manager.show("IP address copied to clipboard", 2000);
---
>         terminal.draw(|f| {
>             let chunks = Layout::default()
>                 .direction(Direction::Vertical)
>                 .margin(2)
>                 .constraints([
>                     Constraint::Length(1),
>                     Constraint::Min(0),
>                     Constraint::Length(3),
>                 ])
>                 .split(f.size());
> 
>             let title = Paragraph::new("DPRS - Docker Container Manager")
>                 .style(Style::default().fg(Color::Cyan));
>             f.render_widget(title, chunks[0]);
> 
>             let items: Vec<ListItem> = app_state
>                 .containers
>                 .iter()
>                 .map(|container| {
>                     ListItem::new(format!(
>                         "{} | {} | {} | {}",
>                         container.name, container.image, container.ip_address, container.ports
>                     ))
>                 })
>                 .collect();
> 
>             let containers = List::new(items)
>                 .block(Block::default().borders(Borders::ALL).title("Containers"))
>                 .highlight_style(
>                     Style::default()
>                         .bg(Color::LightBlue)
>                         .add_modifier(Modifier::BOLD),
>                 )
>                 .highlight_symbol("> ");
> 
>             f.render_stateful_widget(containers, chunks[1], &mut app_state.list_state);
> 
>             let help = Paragraph::new(
>                 "q: Quit | j/↓: Down | k/↑: Up | c: Copy IP | l: Open in Browser | x: Stop Container | r: Reload",
>             )
>             .block(Block::default().borders(Borders::ALL).title("Help"));
>             f.render_widget(help, chunks[2]);
>         })?;
> 
>         // Handle input
>         if event::poll(Duration::from_millis(100))? {
>             if let Event::Key(key) = event::read()? {
>                 let event = match key {
>                     KeyEvent {
>                         code: KeyCode::Char('q'),
>                         ..
>                     } => AppEvent::Quit,
>                     KeyEvent {
>                         code: KeyCode::Char('j'),
>                         ..
77,83c110,116
<                     AppEvent::CopyIP
<                 },
<                 KeyCode::Char('l') => {
<                     if let Err(e) = open_browser(app_state) {
<                         toast_manager.show(&e, 3000);
<                     } else {
<                         toast_manager.show("Opening in browser", 2000);
---
>                     | KeyEvent {
>                         code: KeyCode::Down,
>                         ..
>                     } => AppEvent::Next,
>                     KeyEvent {
>                         code: KeyCode::Char('k'),
>                         ..
85,104c118,161
<                     AppEvent::OpenBrowser
<                 },
<                 KeyCode::Char('x') => {
<                     if let Err(e) = stop_container(app_state) {
<                         toast_manager.show(&e, 3000);
<                     } else {
<                         toast_manager.show("Container stopped", 2000);
<                     }
<                     AppEvent::StopContainer
<                 },
<                 KeyCode::Char('r') => {
<                     app_state.load_containers();
<                     toast_manager.show("Containers reloaded", 2000);
<                     AppEvent::Reload
<                 },
<                 _ => continue,
<             };
< 
<             if !app_state.handle_event(event) {
<                 break;
---
>                     | KeyEvent {
>                         code: KeyCode::Up,
>                         ..
>                     } => AppEvent::Previous,
>                     KeyEvent {
>                         code: KeyCode::Char('c'),
>                         ..
>                     } => {
>                         match copy_ip_address(app_state) {
>                             Ok(_) => {},
>                             Err(e) => eprintln!("Error copying IP: {}", e),
>                         }
>                         AppEvent::CopyIP
>                     },
>                     KeyEvent {
>                         code: KeyCode::Char('l'),
>                         ..
>                     } => {
>                         match open_browser(app_state) {
>                             Ok(_) => {},
>                             Err(e) => eprintln!("Error opening browser: {}", e),
>                         }
>                         AppEvent::OpenBrowser
>                     },
>                     KeyEvent {
>                         code: KeyCode::Char('x'),
>                         ..
>                     } => {
>                         match stop_container(app_state) {
>                             Ok(_) => {},
>                             Err(e) => eprintln!("Error stopping container: {}", e),
>                         }
>                         AppEvent::StopContainer
>                     },
>                     KeyEvent {
>                         code: KeyCode::Char('r'),
>                         ..
>                     } => AppEvent::Reload,
>                     _ => continue,
>                 };
> 
>                 if !app_state.handle_event(event) {
>                     break;
>                 }
110,139d166
< }
< 
< fn ui<B: Backend>(f: &mut Frame<B>, app_state: &mut AppState, toast_manager: &mut ToastManager) {
<     let chunks = Layout::default()
<         .direction(Direction::Vertical)
<         .constraints([
<             Constraint::Min(1),
<             Constraint::Length(3),
<         ].as_ref())
<         .split(f.size());
< 
<     render_container_list(f, app_state, chunks[0]);
<     render_hotkey_bar(f, chunks[1]);
< 
<     // Render toast if available
<     if let Some(toast) = toast_manager.get_toast() {
<         let toast_area = Layout::default()
<             .direction(Direction::Vertical)
<             .constraints([
<                 Constraint::Percentage(90),
<                 Constraint::Percentage(10),
<             ].as_ref())
<             .split(f.size())[1];
<         
<         let toast_paragraph = tui::widgets::Paragraph::new(toast.message.as_str())
<             .style(tui::style::Style::default().fg(tui::style::Color::Yellow))
<             .block(tui::widgets::Block::default().borders(tui::widgets::Borders::ALL).title("Notification"));
<         
<         f.render_widget(toast_paragraph, toast_area);
<     }
