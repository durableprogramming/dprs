1,5d0
< use std::{
<     io::{self, Result},
<     time::Duration,
< };
< 
10a6
> use std::{io, time::Duration};
14c10
<     Terminal,
---
>     Frame, Terminal,
17c13,16
< use dprs::app::{state_machine::{AppEvent, AppState}, actions::{copy_ip_address, open_browser, stop_container}};
---
> use dprs::app::{
>     actions::{copy_ip_address, open_browser, stop_container},
>     state_machine::{AppEvent, AppState},
> };
20c19,22
< fn main() -> Result<()> {
---
> mod app;
> mod display;
> 
> fn main() -> Result<(), io::Error> {
25d26
<     
32a34
>     // Create toast manager
35c37
<     // Run the main loop
---
>     // Main loop
48c50
<         println!("Error: {}", err);
---
>         println!("{}", err);
55c57
<     terminal: &mut Terminal<B>, 
---
>     terminal: &mut Terminal<B>,
58c60
< ) -> io::Result<()> {
---
> ) -> Result<(), String> {
60,92c62,64
<         terminal.draw(|f| {
<             let chunks = Layout::default()
<                 .direction(Direction::Vertical)
<                 .constraints([
<                     Constraint::Min(1),
<                     Constraint::Length(3),
<                 ].as_ref())
<                 .split(f.size());
< 
<             render_container_list(f, app_state, chunks[0]);
<             render_hotkey_bar(f, chunks[1]);
<             
<             // Render toast if available
<             toast_manager.check_expired();
<             if let Some(toast) = toast_manager.get_toast() {
<                 let toast_area = Layout::default()
<                     .direction(Direction::Vertical)
<                     .constraints([
<                         Constraint::Percentage(40),
<                         Constraint::Length(3),
<                         Constraint::Percentage(60),
<                     ].as_ref())
<                     .split(f.size())[1];
<                 
<                 let toast_text = tui::widgets::Paragraph::new(toast.message.clone())
<                     .style(tui::style::Style::default()
<                         .bg(tui::style::Color::Yellow)
<                         .fg(tui::style::Color::Black))
<                     .block(tui::widgets::Block::default().borders(tui::widgets::Borders::ALL));
<                 
<                 f.render_widget(toast_text, toast_area);
<             }
<         })?;
---
>         terminal.draw(|f| ui(f, app_state, toast_manager))?;
> 
>         toast_manager.check_expired();
94,123c66,104
<         if crossterm::event::poll(Duration::from_millis(100))? {
<             if let Event::Key(key) = event::read()? {
<                 match key.code {
<                     KeyCode::Char('q') => return Ok(()),
<                     KeyCode::Char('j') | KeyCode::Down => app_state.handle_event(AppEvent::Next),
<                     KeyCode::Char('k') | KeyCode::Up => app_state.handle_event(AppEvent::Previous),
<                     KeyCode::Char('c') => {
<                         match copy_ip_address(app_state) {
<                             Ok(_) => toast_manager.show("IP copied to clipboard", 1500),
<                             Err(e) => toast_manager.show(&format!("Error: {}", e), 1500),
<                         }
<                     },
<                     KeyCode::Char('l') => {
<                         match open_browser(app_state) {
<                             Ok(_) => toast_manager.show("Opening in browser", 1500),
<                             Err(e) => toast_manager.show(&format!("Error: {}", e), 1500),
<                         }
<                     },
<                     KeyCode::Char('x') => {
<                         match stop_container(app_state) {
<                             Ok(_) => toast_manager.show("Container stopped", 1500),
<                             Err(e) => toast_manager.show(&format!("Error: {}", e), 1500),
<                         }
<                     },
<                     KeyCode::Char('r') => {
<                         app_state.load_containers();
<                         toast_manager.show("Containers reloaded", 1500);
<                     },
<                     _ => {}
<                 }
---
>         if let Event::Key(key) = event::read().map_err(|e| format!("Error reading event: {}", e))? {
>             let event = match key.code {
>                 KeyCode::Char('q') => AppEvent::Quit,
>                 KeyCode::Char('j') | KeyCode::Down => AppEvent::Next,
>                 KeyCode::Char('k') | KeyCode::Up => AppEvent::Previous,
>                 KeyCode::Char('c') => {
>                     if let Err(e) = copy_ip_address(app_state) {
>                         toast_manager.show(&e, 3000);
>                     } else {
>                         toast_manager.show("IP address copied to clipboard", 2000);
>                     }
>                     AppEvent::CopyIP
>                 },
>                 KeyCode::Char('l') => {
>                     if let Err(e) = open_browser(app_state) {
>                         toast_manager.show(&e, 3000);
>                     } else {
>                         toast_manager.show("Opening in browser", 2000);
>                     }
>                     AppEvent::OpenBrowser
>                 },
>                 KeyCode::Char('x') => {
>                     if let Err(e) = stop_container(app_state) {
>                         toast_manager.show(&e, 3000);
>                     } else {
>                         toast_manager.show("Container stopped", 2000);
>                     }
>                     AppEvent::StopContainer
>                 },
>                 KeyCode::Char('r') => {
>                     app_state.load_containers();
>                     toast_manager.show("Containers reloaded", 2000);
>                     AppEvent::Reload
>                 },
>                 _ => continue,
>             };
> 
>             if !app_state.handle_event(event) {
>                 break;
125a107,138
>     }
> 
>     Ok(())
> }
> 
> fn ui<B: Backend>(f: &mut Frame<B>, app_state: &mut AppState, toast_manager: &mut ToastManager) {
>     let chunks = Layout::default()
>         .direction(Direction::Vertical)
>         .constraints([
>             Constraint::Min(1),
>             Constraint::Length(3),
>         ].as_ref())
>         .split(f.size());
> 
>     render_container_list(f, app_state, chunks[0]);
>     render_hotkey_bar(f, chunks[1]);
> 
>     // Render toast if available
>     if let Some(toast) = toast_manager.get_toast() {
>         let toast_area = Layout::default()
>             .direction(Direction::Vertical)
>             .constraints([
>                 Constraint::Percentage(90),
>                 Constraint::Percentage(10),
>             ].as_ref())
>             .split(f.size())[1];
>         
>         let toast_paragraph = tui::widgets::Paragraph::new(toast.message.as_str())
>             .style(tui::style::Style::default().fg(tui::style::Color::Yellow))
>             .block(tui::widgets::Block::default().borders(tui::widgets::Borders::ALL).title("Notification"));
>         
>         f.render_widget(toast_paragraph, toast_area);
