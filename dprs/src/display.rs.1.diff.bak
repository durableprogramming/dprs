6c6
<     widgets::{Block, Borders, Paragraph},
---
>     widgets::{Block, Borders, List, ListItem, Paragraph},
11,32c11,31
< use crate::display::hotkey_bar::render_hotkey_bar;
< use crate::display::process_list::render_container_list;
< use crate::display::toast::ToastManager;
< 
< pub mod hotkey_bar;
< pub mod process_list;
< pub mod toast;
< 
< pub fn draw<B: Backend>(f: &mut Frame<B>, app_state: &mut AppState, toast_manager: &ToastManager) {
<     let size = f.size();
< 
<     let chunks = Layout::default()
<         .direction(Direction::Vertical)
<         .constraints(
<             [
<                 Constraint::Length(3),  // Hotkey bar at top
<                 Constraint::Min(1),     // Main container list
<                 Constraint::Length(3),  // Toast notification (shown conditionally)
<             ]
<             .as_ref(),
<         )
<         .split(size);
---
> use std::time::{Duration, Instant};
> 
> pub struct Toast {
>     pub message: String,
>     pub duration: Duration,
>     pub created_at: Instant,
> }
> 
> impl Toast {
>     pub fn new(message: &str, duration_ms: u64) -> Self {
>         Self {
>             message: message.to_string(),
>             duration: Duration::from_millis(duration_ms),
>             created_at: Instant::now(),
>         }
>     }
> 
>     pub fn is_expired(&self) -> bool {
>         self.created_at.elapsed() > self.duration
>     }
> }
34,35c33,40
<     // Render the hotkey bar
<     render_hotkey_bar(f, chunks[0]);
---
> pub struct ToastManager {
>     toast: Option<Toast>,
> }
> 
> impl ToastManager {
>     pub fn new() -> Self {
>         Self { toast: None }
>     }
37,38c42,44
<     // Render container list
<     render_container_list(f, app_state, chunks[1]);
---
>     pub fn show(&mut self, message: &str, duration_ms: u64) {
>         self.toast = Some(Toast::new(message, duration_ms));
>     }
40,46c46,47
<     // Render toast if available
<     if let Some(toast) = toast_manager.get_toast() {
<         let toast_widget = Paragraph::new(toast.message.clone())
<             .style(Style::default().fg(Color::White).bg(Color::Blue))
<             .block(Block::default().borders(Borders::ALL).title("Notification"));
<         
<         f.render_widget(toast_widget, chunks[2]);
---
>     pub fn clear(&mut self) {
>         self.toast = None;
47a49,137
> 
>     pub fn check_expired(&mut self) {
>         if let Some(toast) = &self.toast {
>             if toast.is_expired() {
>                 self.toast = None;
>             }
>         }
>     }
> 
>     pub fn get_toast(&self) -> Option<&Toast> {
>         self.toast.as_ref()
>     }
> }
> 
> pub fn render_container_list<B: Backend>(f: &mut Frame<B>, app_state: &mut AppState, area: Rect) {
>     let items: Vec<ListItem> = app_state
>         .containers
>         .iter()
>         .map(|container| {
>             let status_style = if container.status.contains("Up") {
>                 Style::default().fg(Color::Green)
>             } else {
>                 Style::default().fg(Color::Red)
>             };
> 
>             let spans = vec![
>                 Span::styled(&container.name, Style::default().fg(Color::Yellow)),
>                 Span::raw(" | "),
>                 Span::styled(&container.image, Style::default().fg(Color::Blue)),
>                 Span::raw(" | "),
>                 Span::styled(&container.ip_address, Style::default().fg(Color::Cyan)),
>                 Span::raw(" | "),
>                 Span::styled(&container.ports, Style::default().fg(Color::Magenta)),
>                 Span::raw(" | "),
>                 Span::styled(&container.status, status_style),
>             ];
> 
>             ListItem::new(spans)
>         })
>         .collect();
> 
>     let containers = List::new(items)
>         .block(Block::default().borders(Borders::ALL).title("Docker Containers"))
>         .highlight_style(
>             Style::default()
>                 .bg(Color::DarkGray)
>                 .fg(Color::White)
>                 .add_modifier(Modifier::BOLD),
>         )
>         .highlight_symbol("> ");
> 
>     f.render_stateful_widget(containers, area, &mut app_state.list_state);
> }
> 
> pub fn render_hotkey_bar<B: Backend>(f: &mut Frame<B>, area: Rect) {
>     let help_text = vec![
>         Span::styled("q", Style::default().fg(Color::Red).add_modifier(Modifier::BOLD)),
>         Span::raw(": Quit | "),
>         Span::styled("j/↓", Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD)),
>         Span::raw(": Down | "),
>         Span::styled("k/↑", Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD)),
>         Span::raw(": Up | "),
>         Span::styled("c", Style::default().fg(Color::Green).add_modifier(Modifier::BOLD)),
>         Span::raw(": Copy IP | "),
>         Span::styled("l", Style::default().fg(Color::Blue).add_modifier(Modifier::BOLD)),
>         Span::raw(": Open in Browser | "),
>         Span::styled("x", Style::default().fg(Color::Magenta).add_modifier(Modifier::BOLD)),
>         Span::raw(": Stop Container | "),
>         Span::styled("r", Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD)),
>         Span::raw(": Reload"),
>     ];
> 
>     let help = Paragraph::new(Spans::from(help_text))
>         .style(Style::default())
>         .block(Block::default().borders(Borders::ALL).title("Hotkeys"));
>     
>     f.render_widget(help, area);
> }
> 
> pub fn render_toast<B: Backend>(f: &mut Frame<B>, toast: &Toast, area: Rect) {
>     let toast_block = Block::default()
>         .borders(Borders::ALL)
>         .style(Style::default().bg(Color::DarkGray));
>     
>     let toast_text = Paragraph::new(Spans::from(toast.message.clone()))
>         .block(toast_block)
>         .style(Style::default().fg(Color::White));
>     
>     f.render_widget(toast_text, area);
