1,5c1,3
< use std::{io, time::Duration};
< use tui::{
<     backend::CrosstermBackend,
<     layout::{Constraint, Direction, Layout},
<     Terminal,
---
> use std::{
>     io::{self, stdout},
>     time::Duration,
6a5
> 
8c7
<     event::{self, DisableMouseCapture, EnableMouseCapture, Event, KeyCode},
---
>     event::{self, Event, KeyCode, KeyEvent},
12,13c11,16
< use clipboard::ClipboardContext;
< use clipboard::ClipboardProvider;
---
> 
> use tui::{
>     backend::{Backend, CrosstermBackend},
>     layout::{Constraint, Direction, Layout, Rect},
>     Terminal,
> };
18,19c21,25
< use app::state_machine::AppState;
< use display::{hotkey_bar, process_list, toast::ToastManager};
---
> use app::actions::{copy_ip_address, open_browser, stop_container};
> use app::state_machine::{AppEvent, AppState};
> use display::toast::{Toast, ToastManager};
> use display::hotkey_bar::render_hotkey_bar;
> use display::process_list::render_container_list;
22c28
<     // Terminal setup
---
>     // Setup terminal
24,25c30,31
<     let mut stdout = io::stdout();
<     execute!(stdout, EnterAlternateScreen, EnableMouseCapture)?;
---
>     let mut stdout = stdout();
>     execute!(stdout, EnterAlternateScreen)?;
29c35
<     // Application state
---
>     // Create app state
30a37,39
>     app_state.load_containers();
> 
>     // Create toast manager
33,34c42,52
<     // Load initial data
<     app_state.refresh_containers()?;
---
>     // Run app
>     let res = run_app(&mut terminal, &mut app_state, &mut toast_manager);
> 
>     // Restore terminal
>     disable_raw_mode()?;
>     execute!(terminal.backend_mut(), LeaveAlternateScreen)?;
>     terminal.show_cursor()?;
> 
>     if let Err(err) = res {
>         println!("Error: {}", err);
>     }
36,38c54,55
<     // Main event loop
<     let tick_rate = Duration::from_millis(250);
<     let mut last_tick = std::time::Instant::now();
---
>     Ok(())
> }
39a57,61
> fn run_app<B: Backend>(
>     terminal: &mut Terminal<B>,
>     app_state: &mut AppState,
>     toast_manager: &mut ToastManager,
> ) -> Result<(), io::Error> {
40a63,66
>         // Check if toasts have expired
>         toast_manager.check_expired();
> 
>         // Draw UI
41a68,69
>             let size = f.size();
>             
48c76
<                 .split(f.size());
---
>                 .split(size);
51c79
<             process_list::render_container_list(f, &mut app_state, chunks[0]);
---
>             render_container_list(f, app_state, chunks[0]);
54c82
<             hotkey_bar::render_hotkey_bar(f, chunks[1]);
---
>             render_hotkey_bar(f, chunks[1]);
56c84,101
<             // TODO: Render toast notifications if implemented
---
>             // Render toast if any
>             if let Some(toast) = toast_manager.get_toast() {
>                 let toast_width = toast.message.len() as u16 + 4;
>                 let toast_height = 3;
>                 let toast_x = (size.width - toast_width) / 2;
>                 let toast_y = (size.height - toast_height) / 2;
>                 let toast_area = Rect::new(toast_x, toast_y, toast_width, toast_height);
>                 
>                 let toast_block = tui::widgets::Block::default()
>                     .borders(tui::widgets::Borders::ALL)
>                     .style(tui::style::Style::default().bg(tui::style::Color::DarkGray));
>                 
>                 let toast_text = tui::widgets::Paragraph::new(tui::text::Spans::from(toast.message.clone()))
>                     .block(toast_block)
>                     .style(tui::style::Style::default().fg(tui::style::Color::White));
>                 
>                 f.render_widget(toast_text, toast_area);
>             }
59,67c104,105
<         // Check for toast expiration
<         toast_manager.check_expired();
< 
<         // Check for events with timeout
<         let timeout = tick_rate
<             .checked_sub(last_tick.elapsed())
<             .unwrap_or_else(|| Duration::from_secs(0));
< 
<         if crossterm::event::poll(timeout)? {
---
>         // Handle input
>         if event::poll(Duration::from_millis(100))? {
71,72c109,110
<                     KeyCode::Char('j') | KeyCode::Down => app_state.next(),
<                     KeyCode::Char('k') | KeyCode::Up => app_state.previous(),
---
>                     KeyCode::Char('j') | KeyCode::Down => app_state.handle_event(AppEvent::Next),
>                     KeyCode::Char('k') | KeyCode::Up => app_state.handle_event(AppEvent::Previous),
74,78c112,114
<                         // Copy IP address to clipboard
<                         if let Some(container) = app_state.get_selected_container() {
<                             let mut ctx: ClipboardContext = ClipboardProvider::new().unwrap();
<                             ctx.set_contents(container.ip_address.clone()).unwrap();
<                             toast_manager.show("IP address copied to clipboard!", 2000);
---
>                         match copy_ip_address(app_state) {
>                             Ok(_) => toast_manager.show("IP address copied to clipboard", 2000),
>                             Err(e) => toast_manager.show(&format!("Error: {}", e), 2000),
80c116
<                     },
---
>                     }
82,85c118,120
<                         // Open in browser
<                         if let Some(container) = app_state.get_selected_container() {
<                             // TODO: Implement browser opening functionality
<                             toast_manager.show(&format!("Opening {} in browser", container.name), 2000);
---
>                         match open_browser(app_state) {
>                             Ok(_) => toast_manager.show("Opening browser", 2000),
>                             Err(e) => toast_manager.show(&format!("Error: {}", e), 2000),
87c122
<                     },
---
>                     }
89,92c124,126
<                         // Stop container
<                         if let Some(container) = app_state.get_selected_container() {
<                             // TODO: Implement container stopping functionality
<                             toast_manager.show(&format!("Stopping container {}", container.name), 2000);
---
>                         match stop_container(app_state) {
>                             Ok(_) => toast_manager.show("Container stopped", 2000),
>                             Err(e) => toast_manager.show(&format!("Error: {}", e), 2000),
94c128
<                     },
---
>                     }
96,99c130,132
<                         // Refresh container list
<                         app_state.refresh_containers()?;
<                         toast_manager.show("Container list refreshed", 2000);
<                     },
---
>                         app_state.load_containers();
>                         toast_manager.show("Containers reloaded", 2000);
>                     }
104,108d136
< 
<         if last_tick.elapsed() >= tick_rate {
<             last_tick = std::time::Instant::now();
<             // Perform periodic updates here if needed
<         }
110,118d137
< 
<     // Restore terminal
<     disable_raw_mode()?;
<     execute!(
<         terminal.backend_mut(),
<         LeaveAlternateScreen,
<         DisableMouseCapture
<     )?;
<     terminal.show_cursor()?;
