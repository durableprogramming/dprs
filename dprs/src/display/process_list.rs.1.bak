use tui::{
    backend::Backend,
    layout::{Alignment, Constraint, Direction, Layout, Rect},
    style::{Color, Modifier, Style},
    text::{Span, Spans},
    widgets::{Block, Borders, List, ListItem, Paragraph},
    Frame,
};

use crate::app::state_machine::AppState;

pub fn render_container_list<B: Backend>(f: &mut Frame<B>, area: Rect, app_state: &mut AppState) {
    let chunks = Layout::default()
        .direction(Direction::Vertical)
        .margin(0)
        .constraints([
            Constraint::Length(1),
            Constraint::Min(0),
            Constraint::Length(3),
        ])
        .split(area);

    // Title
    let title = Paragraph::new("DPRS - Docker Container Manager")
        .style(Style::default().fg(Color::Cyan))
        .alignment(Alignment::Center);
    f.render_widget(title, chunks[0]);

    // Container list
    let items: Vec<ListItem> = app_state
        .containers
        .iter()
        .map(|container| {
            let status_color = if container.status.contains("Up") {
                Color::Green
            } else {
                Color::Red
            };

            let line = Spans::from(vec![
                Span::styled(
                    format!("{:<20}", container.name),
                    Style::default().fg(Color::Yellow),
                ),
                Span::raw(" | "),
                Span::styled(
                    format!("{:<30}", container.image),
                    Style::default().fg(Color::Blue),
                ),
                Span::raw(" | "),
                Span::styled(
                    format!("{:<15}", container.ip_address),
                    Style::default().fg(Color::Magenta),
                ),
                Span::raw(" | "),
                Span::styled(
                    format!("{:<20}", container.ports),
                    Style::default().fg(Color::Cyan),
                ),
                Span::raw(" | "),
                Span::styled(
                    container.status.clone(),
                    Style::default().fg(status_color),
                ),
            ]);

            ListItem::new(line)
        })
        .collect();

    let containers = List::new(items)
        .block(Block::default().borders(Borders::ALL).title("Containers"))
        .highlight_style(
            Style::default()
                .bg(Color::LightBlue)
                .fg(Color::Black)
                .add_modifier(Modifier::BOLD),
        )
        .highlight_symbol(">> ");

    f.render_stateful_widget(containers, chunks[1], &mut app_state.list_state);

    // Help section
    let help = Paragraph::new(
        "q: Quit | j/↓: Down | k/↑: Up | c: Copy IP | l: Open in Browser | x: Stop Container | r: Reload",
    )
    .style(Style::default().fg(Color::White))
    .block(Block::default().borders(Borders::ALL).title("Help"));
    
    f.render_widget(help, chunks[2]);
}
