use std::{
    io::{self, Result},
    time::Duration,
};

use crossterm::{
    event::{self, DisableMouseCapture, EnableMouseCapture, Event, KeyCode},
    execute,
    terminal::{disable_raw_mode, enable_raw_mode, EnterAlternateScreen, LeaveAlternateScreen},
};
use tui::{
    backend::{Backend, CrosstermBackend},
    layout::{Constraint, Direction, Layout},
    Terminal,
};

use app::{state_machine::{AppEvent, AppState}, actions::{copy_ip_address, open_browser, stop_container}};
use display::{render_container_list, render_hotkey_bar, ToastManager};

fn main() -> Result<()> {
    // Setup terminal
    enable_raw_mode()?;
    let mut stdout = io::stdout();
    execute!(stdout, EnterAlternateScreen, EnableMouseCapture)?;
    
    let backend = CrosstermBackend::new(stdout);
    let mut terminal = Terminal::new(backend)?;

    // Create app state
    let mut app_state = AppState::new();
    app_state.load_containers();
    
    let mut toast_manager = ToastManager::new();

    // Run the main loop
    let res = run_app(&mut terminal, &mut app_state, &mut toast_manager);

    // Restore terminal
    disable_raw_mode()?;
    execute!(
        terminal.backend_mut(),
        LeaveAlternateScreen,
        DisableMouseCapture
    )?;
    terminal.show_cursor()?;

    if let Err(err) = res {
        println!("Error: {}", err);
    }

    Ok(())
}

fn run_app<B: Backend>(
    terminal: &mut Terminal<B>, 
    app_state: &mut AppState,
    toast_manager: &mut ToastManager,
) -> io::Result<()> {
    loop {
        terminal.draw(|f| {
            let chunks = Layout::default()
                .direction(Direction::Vertical)
                .constraints([
                    Constraint::Min(1),
                    Constraint::Length(3),
                ].as_ref())
                .split(f.size());

            render_container_list(f, app_state, chunks[0]);
            render_hotkey_bar(f, chunks[1]);
            
            // Render toast if available
            toast_manager.check_expired();
            if let Some(toast) = toast_manager.get_toast() {
                let toast_area = Layout::default()
                    .direction(Direction::Vertical)
                    .constraints([
                        Constraint::Percentage(40),
                        Constraint::Length(3),
                        Constraint::Percentage(60),
                    ].as_ref())
                    .split(f.size())[1];
                
                let toast_text = tui::widgets::Paragraph::new(toast.message.clone())
                    .style(tui::style::Style::default()
                        .bg(tui::style::Color::Yellow)
                        .fg(tui::style::Color::Black))
                    .block(tui::widgets::Block::default().borders(tui::widgets::Borders::ALL));
                
                f.render_widget(toast_text, toast_area);
            }
        })?;

        if crossterm::event::poll(Duration::from_millis(100))? {
            if let Event::Key(key) = event::read()? {
                match key.code {
                    KeyCode::Char('q') => return Ok(()),
                    KeyCode::Char('j') | KeyCode::Down => app_state.handle_event(AppEvent::Next),
                    KeyCode::Char('k') | KeyCode::Up => app_state.handle_event(AppEvent::Previous),
                    KeyCode::Char('c') => {
                        match copy_ip_address(app_state) {
                            Ok(_) => toast_manager.show("IP copied to clipboard", 1500),
                            Err(e) => toast_manager.show(&format!("Error: {}", e), 1500),
                        }
                    },
                    KeyCode::Char('l') => {
                        match open_browser(app_state) {
                            Ok(_) => toast_manager.show("Opening in browser", 1500),
                            Err(e) => toast_manager.show(&format!("Error: {}", e), 1500),
                        }
                    },
                    KeyCode::Char('x') => {
                        match stop_container(app_state) {
                            Ok(_) => toast_manager.show("Container stopped", 1500),
                            Err(e) => toast_manager.show(&format!("Error: {}", e), 1500),
                        }
                    },
                    KeyCode::Char('r') => {
                        app_state.load_containers();
                        toast_manager.show("Containers reloaded", 1500);
                    },
                    _ => {}
                }
            }
        }
    }
}
