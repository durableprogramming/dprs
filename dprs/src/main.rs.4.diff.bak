2,3c2
<     io::{self, stdout},
<     process::{Command, exit},
---
>     io::{self, Result},
8c7
<     event::{self, Event, KeyCode, KeyModifiers},
---
>     event::{self, DisableMouseCapture, EnableMouseCapture, Event, KeyCode},
13c12
<     backend::CrosstermBackend,
---
>     backend::{Backend, CrosstermBackend},
15,17d13
<     style::{Color, Style},
<     text::Spans,
<     widgets::{Block, Borders, Paragraph},
21,23c17,18
< use dprs::app::state_machine::{AppState, AppEvent};
< use dprs::app::actions::{copy_ip_address, open_browser, stop_container};
< use dprs::display::{render_container_list, render_hotkey_bar, ToastManager};
---
> use app::{state_machine::{AppEvent, AppState}, actions::{copy_ip_address, open_browser, stop_container}};
> use display::{render_container_list, render_hotkey_bar, ToastManager};
25,26c20,21
< fn main() -> Result<(), Box<dyn std::error::Error>> {
<     // Set up the terminal
---
> fn main() -> Result<()> {
>     // Setup terminal
28,29c23,25
<     let mut stdout = stdout();
<     execute!(stdout, EnterAlternateScreen)?;
---
>     let mut stdout = io::stdout();
>     execute!(stdout, EnterAlternateScreen, EnableMouseCapture)?;
>     
33c29
<     // Set up app state
---
>     // Create app state
36,37c32
< 
<     // Set up toast manager
---
>     
40,42c35,59
<     // Main loop
<     let mut running = true;
<     while running {
---
>     // Run the main loop
>     let res = run_app(&mut terminal, &mut app_state, &mut toast_manager);
> 
>     // Restore terminal
>     disable_raw_mode()?;
>     execute!(
>         terminal.backend_mut(),
>         LeaveAlternateScreen,
>         DisableMouseCapture
>     )?;
>     terminal.show_cursor()?;
> 
>     if let Err(err) = res {
>         println!("Error: {}", err);
>     }
> 
>     Ok(())
> }
> 
> fn run_app<B: Backend>(
>     terminal: &mut Terminal<B>, 
>     app_state: &mut AppState,
>     toast_manager: &mut ToastManager,
> ) -> io::Result<()> {
>     loop {
44,45d60
<             let size = f.size();
<             
49c64
<                     Constraint::Min(3),
---
>                     Constraint::Min(1),
52,54c67,69
<                 .split(size);
<             
<             render_container_list(f, &mut app_state, chunks[0]);
---
>                 .split(f.size());
> 
>             render_container_list(f, app_state, chunks[0]);
57c72,73
<             // Display toast if any
---
>             // Render toast if available
>             toast_manager.check_expired();
59,66d74
<                 let toast_block = Block::default()
<                     .borders(Borders::ALL)
<                     .style(Style::default().bg(Color::DarkGray));
<                 
<                 let toast_text = Paragraph::new(Spans::from(toast.message.clone()))
<                     .block(toast_block)
<                     .style(Style::default().fg(Color::White));
<                 
70c78
<                         Constraint::Percentage(45),
---
>                         Constraint::Percentage(40),
72c80
<                         Constraint::Percentage(45),
---
>                         Constraint::Percentage(60),
74c82,88
<                     .split(size)[1];
---
>                     .split(f.size())[1];
>                 
>                 let toast_text = tui::widgets::Paragraph::new(toast.message.clone())
>                     .style(tui::style::Style::default()
>                         .bg(tui::style::Color::Yellow)
>                         .fg(tui::style::Color::Black))
>                     .block(tui::widgets::Block::default().borders(tui::widgets::Borders::ALL));
79,80d92
<         
<         toast_manager.check_expired();
82c94
<         if event::poll(Duration::from_millis(100))? {
---
>         if crossterm::event::poll(Duration::from_millis(100))? {
85,93c97,99
<                     KeyCode::Char('q') => {
<                         running = false;
<                     },
<                     KeyCode::Char('j') | KeyCode::Down => {
<                         app_state.handle_event(AppEvent::Next);
<                     },
<                     KeyCode::Char('k') | KeyCode::Up => {
<                         app_state.handle_event(AppEvent::Previous);
<                     },
---
>                     KeyCode::Char('q') => return Ok(()),
>                     KeyCode::Char('j') | KeyCode::Down => app_state.handle_event(AppEvent::Next),
>                     KeyCode::Char('k') | KeyCode::Up => app_state.handle_event(AppEvent::Previous),
95c101
<                         match copy_ip_address(&app_state) {
---
>                         match copy_ip_address(app_state) {
97c103
<                             Err(e) => toast_manager.show(&format!("Error: {}", e), 2000),
---
>                             Err(e) => toast_manager.show(&format!("Error: {}", e), 1500),
101,103c107,109
<                         match open_browser(&app_state) {
<                             Ok(_) => toast_manager.show("Opening in browser...", 1500),
<                             Err(e) => toast_manager.show(&format!("Error: {}", e), 2000),
---
>                         match open_browser(app_state) {
>                             Ok(_) => toast_manager.show("Opening in browser", 1500),
>                             Err(e) => toast_manager.show(&format!("Error: {}", e), 1500),
107c113
<                         match stop_container(&mut app_state) {
---
>                         match stop_container(app_state) {
109c115
<                             Err(e) => toast_manager.show(&format!("Error: {}", e), 2000),
---
>                             Err(e) => toast_manager.show(&format!("Error: {}", e), 1500),
121,127d126
< 
<     // Restore terminal
<     disable_raw_mode()?;
<     execute!(terminal.backend_mut(), LeaveAlternateScreen)?;
<     terminal.show_cursor()?;
< 
<     Ok(())
