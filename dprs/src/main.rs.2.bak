use crossterm::{
    event::{self, Event, KeyCode, KeyEvent, KeyModifiers},
    execute,
    terminal::{disable_raw_mode, enable_raw_mode, EnterAlternateScreen, LeaveAlternateScreen},
};
use std::{io, time::Duration};
use tui::{
    backend::CrosstermBackend,
    layout::{Constraint, Direction, Layout},
    style::{Color, Modifier, Style},
    widgets::{Block, Borders, List, ListItem, Paragraph},
    Terminal,
};
use clipboard::{ClipboardContext, ClipboardProvider};

mod app;
use app::{
    actions::{copy_ip_address, open_browser, stop_container},
    state_machine::{AppEvent, AppState},
};

fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Set up terminal
    enable_raw_mode()?;
    let mut stdout = io::stdout();
    execute!(stdout, EnterAlternateScreen)?;
    let backend = CrosstermBackend::new(stdout);
    let mut terminal = Terminal::new(backend)?;

    // Create app state
    let mut app_state = AppState::new();
    app_state.load_containers();

    // Start the main loop
    let res = run_app(&mut terminal, &mut app_state);

    // Restore terminal
    disable_raw_mode()?;
    execute!(terminal.backend_mut(), LeaveAlternateScreen)?;
    terminal.show_cursor()?;

    if let Err(err) = res {
        println!("Error: {}", err);
    }

    Ok(())
}

fn run_app<B: tui::backend::Backend>(
    terminal: &mut Terminal<B>,
    app_state: &mut AppState,
) -> Result<(), Box<dyn std::error::Error>> {
    loop {
        terminal.draw(|f| {
            let chunks = Layout::default()
                .direction(Direction::Vertical)
                .margin(2)
                .constraints([
                    Constraint::Length(1),
                    Constraint::Min(0),
                    Constraint::Length(3),
                ])
                .split(f.size());

            let title = Paragraph::new("DPRS - Docker Container Manager")
                .style(Style::default().fg(Color::Cyan));
            f.render_widget(title, chunks[0]);

            let items: Vec<ListItem> = app_state
                .containers
                .iter()
                .map(|container| {
                    ListItem::new(format!(
                        "{} | {} | {} | {}",
                        container.name, container.image, container.ip_address, container.ports
                    ))
                })
                .collect();

            let containers = List::new(items)
                .block(Block::default().borders(Borders::ALL).title("Containers"))
                .highlight_style(
                    Style::default()
                        .bg(Color::LightBlue)
                        .add_modifier(Modifier::BOLD),
                )
                .highlight_symbol("> ");

            f.render_stateful_widget(containers, chunks[1], &mut app_state.list_state);

            let help = Paragraph::new(
                "q: Quit | j/↓: Down | k/↑: Up | c: Copy IP | l: Open in Browser | x: Stop Container | r: Reload",
            )
            .block(Block::default().borders(Borders::ALL).title("Help"));
            f.render_widget(help, chunks[2]);
        })?;

        // Handle input
        if event::poll(Duration::from_millis(100))? {
            if let Event::Key(key) = event::read()? {
                let event = match key {
                    KeyEvent {
                        code: KeyCode::Char('q'),
                        ..
                    } => AppEvent::Quit,
                    KeyEvent {
                        code: KeyCode::Char('j'),
                        ..
                    }
                    | KeyEvent {
                        code: KeyCode::Down,
                        ..
                    } => AppEvent::Next,
                    KeyEvent {
                        code: KeyCode::Char('k'),
                        ..
                    }
                    | KeyEvent {
                        code: KeyCode::Up,
                        ..
                    } => AppEvent::Previous,
                    KeyEvent {
                        code: KeyCode::Char('c'),
                        ..
                    } => {
                        match copy_ip_address(app_state) {
                            Ok(_) => {},
                            Err(e) => eprintln!("Error copying IP: {}", e),
                        }
                        AppEvent::CopyIP
                    },
                    KeyEvent {
                        code: KeyCode::Char('l'),
                        ..
                    } => {
                        match open_browser(app_state) {
                            Ok(_) => {},
                            Err(e) => eprintln!("Error opening browser: {}", e),
                        }
                        AppEvent::OpenBrowser
                    },
                    KeyEvent {
                        code: KeyCode::Char('x'),
                        ..
                    } => {
                        match stop_container(app_state) {
                            Ok(_) => {},
                            Err(e) => eprintln!("Error stopping container: {}", e),
                        }
                        AppEvent::StopContainer
                    },
                    KeyEvent {
                        code: KeyCode::Char('r'),
                        ..
                    } => AppEvent::Reload,
                    _ => continue,
                };

                if !app_state.handle_event(event) {
                    break;
                }
            }
        }
    }

    Ok(())
}
