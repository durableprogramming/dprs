1,5d0
< use std::{
<     io::{self, stdout},
<     time::Duration,
< };
< 
7c2
<     event::{self, Event, KeyCode, KeyEvent},
---
>     event::{self, Event, KeyCode},
11c6
< 
---
> use std::{io, time::Duration};
14c9
<     layout::{Constraint, Direction, Layout, Rect},
---
>     layout::{Constraint, Direction, Layout},
23,25c18
< use display::toast::{Toast, ToastManager};
< use display::hotkey_bar::render_hotkey_bar;
< use display::process_list::render_container_list;
---
> use display::{render_container_list, render_hotkey_bar, toast::Toast, ToastManager};
30c23
<     let mut stdout = stdout();
---
>     let mut stdout = io::stdout();
42c35
<     // Run app
---
>     // Run the app
63,66c56
<         // Check if toasts have expired
<         toast_manager.check_expired();
< 
<         // Draw UI
---
>         // Render UI
68,69d57
<             let size = f.size();
<             
72,76c60,61
<                 .constraints([
<                     Constraint::Min(1),
<                     Constraint::Length(3),
<                 ].as_ref())
<                 .split(size);
---
>                 .constraints([Constraint::Min(1), Constraint::Length(3)].as_ref())
>                 .split(f.size());
78d62
<             // Render container list
80,81d63
<             
<             // Render hotkey bar
83,84c65,66
<             
<             // Render toast if any
---
> 
>             // Render toast if available
86,100c68,90
<                 let toast_width = toast.message.len() as u16 + 4;
<                 let toast_height = 3;
<                 let toast_x = (size.width - toast_width) / 2;
<                 let toast_y = (size.height - toast_height) / 2;
<                 let toast_area = Rect::new(toast_x, toast_y, toast_width, toast_height);
<                 
<                 let toast_block = tui::widgets::Block::default()
<                     .borders(tui::widgets::Borders::ALL)
<                     .style(tui::style::Style::default().bg(tui::style::Color::DarkGray));
<                 
<                 let toast_text = tui::widgets::Paragraph::new(tui::text::Spans::from(toast.message.clone()))
<                     .block(toast_block)
<                     .style(tui::style::Style::default().fg(tui::style::Color::White));
<                 
<                 f.render_widget(toast_text, toast_area);
---
>                 let toast_area = Layout::default()
>                     .direction(Direction::Vertical)
>                     .constraints([
>                         Constraint::Percentage(40),
>                         Constraint::Length(3),
>                         Constraint::Percentage(40),
>                     ])
>                     .split(f.size());
> 
>                 let toast_width = toast.message.len() as u16 + 4; // Add some padding
>                 let toast_area = Layout::default()
>                     .direction(Direction::Horizontal)
>                     .constraints([
>                         Constraint::Percentage(50 - (toast_width as u16 / 2)),
>                         Constraint::Length(toast_width),
>                         Constraint::Percentage(50 - (toast_width as u16 / 2)),
>                     ])
>                     .split(toast_area[1])[1];
> 
>                 tui::widgets::Paragraph::new(toast.message.clone())
>                     .block(tui::widgets::Block::default().borders(tui::widgets::Borders::ALL))
>                     .style(tui::style::Style::default().bg(tui::style::Color::DarkGray).fg(tui::style::Color::White))
>                     .render(f, toast_area);
103a94,96
>         // Check for expired toast
>         toast_manager.check_expired();
> 
113,114c106,107
<                             Ok(_) => toast_manager.show("IP address copied to clipboard", 2000),
<                             Err(e) => toast_manager.show(&format!("Error: {}", e), 2000),
---
>                             Ok(_) => toast_manager.show("IP copied to clipboard", 2000),
>                             Err(e) => toast_manager.show(&e, 2000),
119,120c112,113
<                             Ok(_) => toast_manager.show("Opening browser", 2000),
<                             Err(e) => toast_manager.show(&format!("Error: {}", e), 2000),
---
>                             Ok(_) => toast_manager.show("Browser opened", 2000),
>                             Err(e) => toast_manager.show(&e, 2000),
126c119
<                             Err(e) => toast_manager.show(&format!("Error: {}", e), 2000),
---
>                             Err(e) => toast_manager.show(&e, 2000),
