0a1,6
> use std::{
>     io::{self, stdout},
>     process::{Command, exit},
>     time::Duration,
> };
> 
2c8
<     event::{self, Event, KeyCode},
---
>     event::{self, Event, KeyCode, KeyModifiers},
6d11
< use std::{io, time::Duration};
8c13
<     backend::{Backend, CrosstermBackend},
---
>     backend::CrosstermBackend,
9a15,17
>     style::{Color, Style},
>     text::Spans,
>     widgets::{Block, Borders, Paragraph},
13,18c21,23
< mod app;
< mod display;
< 
< use app::actions::{copy_ip_address, open_browser, stop_container};
< use app::state_machine::{AppEvent, AppState};
< use display::{render_container_list, render_hotkey_bar, toast::Toast, ToastManager};
---
> use dprs::app::state_machine::{AppState, AppEvent};
> use dprs::app::actions::{copy_ip_address, open_browser, stop_container};
> use dprs::display::{render_container_list, render_hotkey_bar, ToastManager};
20,21c25,26
< fn main() -> Result<(), io::Error> {
<     // Setup terminal
---
> fn main() -> Result<(), Box<dyn std::error::Error>> {
>     // Set up the terminal
23c28
<     let mut stdout = io::stdout();
---
>     let mut stdout = stdout();
28c33
<     // Create app state
---
>     // Set up app state
32c37
<     // Create toast manager
---
>     // Set up toast manager
35,56c40,42
<     // Run the app
<     let res = run_app(&mut terminal, &mut app_state, &mut toast_manager);
< 
<     // Restore terminal
<     disable_raw_mode()?;
<     execute!(terminal.backend_mut(), LeaveAlternateScreen)?;
<     terminal.show_cursor()?;
< 
<     if let Err(err) = res {
<         println!("Error: {}", err);
<     }
< 
<     Ok(())
< }
< 
< fn run_app<B: Backend>(
<     terminal: &mut Terminal<B>,
<     app_state: &mut AppState,
<     toast_manager: &mut ToastManager,
< ) -> Result<(), io::Error> {
<     loop {
<         // Render UI
---
>     // Main loop
>     let mut running = true;
>     while running {
57a44,45
>             let size = f.size();
>             
60,63c48,54
<                 .constraints([Constraint::Min(1), Constraint::Length(3)].as_ref())
<                 .split(f.size());
< 
<             render_container_list(f, app_state, chunks[0]);
---
>                 .constraints([
>                     Constraint::Min(3),
>                     Constraint::Length(3),
>                 ].as_ref())
>                 .split(size);
>             
>             render_container_list(f, &mut app_state, chunks[0]);
65,66c56,57
< 
<             // Render toast if available
---
>             
>             // Display toast if any
67a59,66
>                 let toast_block = Block::default()
>                     .borders(Borders::ALL)
>                     .style(Style::default().bg(Color::DarkGray));
>                 
>                 let toast_text = Paragraph::new(Spans::from(toast.message.clone()))
>                     .block(toast_block)
>                     .style(Style::default().fg(Color::White));
>                 
71c70
<                         Constraint::Percentage(40),
---
>                         Constraint::Percentage(45),
73,90c72,76
<                         Constraint::Percentage(40),
<                     ])
<                     .split(f.size());
< 
<                 let toast_width = toast.message.len() as u16 + 4; // Add some padding
<                 let toast_area = Layout::default()
<                     .direction(Direction::Horizontal)
<                     .constraints([
<                         Constraint::Percentage(50 - (toast_width as u16 / 2)),
<                         Constraint::Length(toast_width),
<                         Constraint::Percentage(50 - (toast_width as u16 / 2)),
<                     ])
<                     .split(toast_area[1])[1];
< 
<                 tui::widgets::Paragraph::new(toast.message.clone())
<                     .block(tui::widgets::Block::default().borders(tui::widgets::Borders::ALL))
<                     .style(tui::style::Style::default().bg(tui::style::Color::DarkGray).fg(tui::style::Color::White))
<                     .render(f, toast_area);
---
>                         Constraint::Percentage(45),
>                     ].as_ref())
>                     .split(size)[1];
>                 
>                 f.render_widget(toast_text, toast_area);
93,94c79
< 
<         // Check for expired toast
---
>         
97d81
<         // Handle input
101,103c85,93
<                     KeyCode::Char('q') => break,
<                     KeyCode::Char('j') | KeyCode::Down => app_state.handle_event(AppEvent::Next),
<                     KeyCode::Char('k') | KeyCode::Up => app_state.handle_event(AppEvent::Previous),
---
>                     KeyCode::Char('q') => {
>                         running = false;
>                     },
>                     KeyCode::Char('j') | KeyCode::Down => {
>                         app_state.handle_event(AppEvent::Next);
>                     },
>                     KeyCode::Char('k') | KeyCode::Up => {
>                         app_state.handle_event(AppEvent::Previous);
>                     },
105,107c95,97
<                         match copy_ip_address(app_state) {
<                             Ok(_) => toast_manager.show("IP copied to clipboard", 2000),
<                             Err(e) => toast_manager.show(&e, 2000),
---
>                         match copy_ip_address(&app_state) {
>                             Ok(_) => toast_manager.show("IP copied to clipboard", 1500),
>                             Err(e) => toast_manager.show(&format!("Error: {}", e), 2000),
109c99
<                     }
---
>                     },
111,113c101,103
<                         match open_browser(app_state) {
<                             Ok(_) => toast_manager.show("Browser opened", 2000),
<                             Err(e) => toast_manager.show(&e, 2000),
---
>                         match open_browser(&app_state) {
>                             Ok(_) => toast_manager.show("Opening in browser...", 1500),
>                             Err(e) => toast_manager.show(&format!("Error: {}", e), 2000),
115c105
<                     }
---
>                     },
117,119c107,109
<                         match stop_container(app_state) {
<                             Ok(_) => toast_manager.show("Container stopped", 2000),
<                             Err(e) => toast_manager.show(&e, 2000),
---
>                         match stop_container(&mut app_state) {
>                             Ok(_) => toast_manager.show("Container stopped", 1500),
>                             Err(e) => toast_manager.show(&format!("Error: {}", e), 2000),
121c111
<                     }
---
>                     },
124,125c114,115
<                         toast_manager.show("Containers reloaded", 2000);
<                     }
---
>                         toast_manager.show("Containers reloaded", 1500);
>                     },
130a121,125
> 
>     // Restore terminal
>     disable_raw_mode()?;
>     execute!(terminal.backend_mut(), LeaveAlternateScreen)?;
>     terminal.show_cursor()?;
