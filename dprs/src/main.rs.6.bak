use crossterm::{
    event::{self, Event, KeyCode},
    execute,
    terminal::{disable_raw_mode, enable_raw_mode, EnterAlternateScreen, LeaveAlternateScreen},
};
use std::{io, time::Duration};
use tui::{
    backend::{Backend, CrosstermBackend},
    layout::{Constraint, Direction, Layout},
    Terminal,
};

mod app;
mod display;

use app::actions::{copy_ip_address, open_browser, stop_container};
use app::state_machine::{AppEvent, AppState};
use display::{render_container_list, render_hotkey_bar, toast::Toast, ToastManager};

fn main() -> Result<(), io::Error> {
    // Setup terminal
    enable_raw_mode()?;
    let mut stdout = io::stdout();
    execute!(stdout, EnterAlternateScreen)?;
    let backend = CrosstermBackend::new(stdout);
    let mut terminal = Terminal::new(backend)?;

    // Create app state
    let mut app_state = AppState::new();
    app_state.load_containers();

    // Create toast manager
    let mut toast_manager = ToastManager::new();

    // Run the app
    let res = run_app(&mut terminal, &mut app_state, &mut toast_manager);

    // Restore terminal
    disable_raw_mode()?;
    execute!(terminal.backend_mut(), LeaveAlternateScreen)?;
    terminal.show_cursor()?;

    if let Err(err) = res {
        println!("Error: {}", err);
    }

    Ok(())
}

fn run_app<B: Backend>(
    terminal: &mut Terminal<B>,
    app_state: &mut AppState,
    toast_manager: &mut ToastManager,
) -> Result<(), io::Error> {
    loop {
        // Render UI
        terminal.draw(|f| {
            let chunks = Layout::default()
                .direction(Direction::Vertical)
                .constraints([Constraint::Min(1), Constraint::Length(3)].as_ref())
                .split(f.size());

            render_container_list(f, app_state, chunks[0]);
            render_hotkey_bar(f, chunks[1]);

            // Render toast if available
            if let Some(toast) = toast_manager.get_toast() {
                let toast_area = Layout::default()
                    .direction(Direction::Vertical)
                    .constraints([
                        Constraint::Percentage(40),
                        Constraint::Length(3),
                        Constraint::Percentage(40),
                    ])
                    .split(f.size());

                let toast_width = toast.message.len() as u16 + 4; // Add some padding
                let toast_area = Layout::default()
                    .direction(Direction::Horizontal)
                    .constraints([
                        Constraint::Percentage(50 - (toast_width as u16 / 2)),
                        Constraint::Length(toast_width),
                        Constraint::Percentage(50 - (toast_width as u16 / 2)),
                    ])
                    .split(toast_area[1])[1];

                tui::widgets::Paragraph::new(toast.message.clone())
                    .block(tui::widgets::Block::default().borders(tui::widgets::Borders::ALL))
                    .style(tui::style::Style::default().bg(tui::style::Color::DarkGray).fg(tui::style::Color::White))
                    .render(f, toast_area);
            }
        })?;

        // Check for expired toast
        toast_manager.check_expired();

        // Handle input
        if event::poll(Duration::from_millis(100))? {
            if let Event::Key(key) = event::read()? {
                match key.code {
                    KeyCode::Char('q') => break,
                    KeyCode::Char('j') | KeyCode::Down => app_state.handle_event(AppEvent::Next),
                    KeyCode::Char('k') | KeyCode::Up => app_state.handle_event(AppEvent::Previous),
                    KeyCode::Char('c') => {
                        match copy_ip_address(app_state) {
                            Ok(_) => toast_manager.show("IP copied to clipboard", 2000),
                            Err(e) => toast_manager.show(&e, 2000),
                        }
                    }
                    KeyCode::Char('l') => {
                        match open_browser(app_state) {
                            Ok(_) => toast_manager.show("Browser opened", 2000),
                            Err(e) => toast_manager.show(&e, 2000),
                        }
                    }
                    KeyCode::Char('x') => {
                        match stop_container(app_state) {
                            Ok(_) => toast_manager.show("Container stopped", 2000),
                            Err(e) => toast_manager.show(&e, 2000),
                        }
                    }
                    KeyCode::Char('r') => {
                        app_state.load_containers();
                        toast_manager.show("Containers reloaded", 2000);
                    }
                    _ => {}
                }
            }
        }
    }

    Ok(())
}
